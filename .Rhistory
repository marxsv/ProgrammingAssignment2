y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
play()
mean(my_data[!my_na])
my_data[!my_na]
nxt()
0/0
Inf-Inf
x <- c(NA,NAN, 5,0.56,NAN)
x <- c(NA,NaN, 5,0.56,NaN)
is.na(x)
is.nan(x)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
vect[c("norf","bar")]
swirl()
my_vector <- 1:10
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol = 5)
play()
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = c('Subj','Age'))
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = list('Subj','Age'))
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = list('Subj','Age','c','d',e))
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = list('Subj','Age','c','d','e'))
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = list('Subj','Age'))
dimnames = list(c('a','b','c','d'),c('a','b','c','d','e') )
my_matrix3
dim(dimnames)
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = list(c('a','b','c','d'),c('a','b','c','d','e') )))
my_matrix3 <- matrix(1:20,nrow=4,ncol = 5,dimnames = list(c('a','b','c','d'),c('a','b','c','d','e') ))
my_matrix3
nxt()
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
?rownames
getwd
getwd()
cd R
setwd(R)
?optimize
?optim
Date
POSIXlt
x <- sys.time()
x <- Sys.time()
x
p <- as.POSIXlt
p
names(unclass(p))
class(p)
p <- POSIXlt(x)
p <- as.POSIXlt(x)
name(unclass(p))
names(unclass(p))
p$mon
x
p$hour
p$mon
p$year
p$wday
p$yday
p$sec
p$year
z <- 1:5
if (z>2){x<-1}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:4
if(x > 5) {
+     x <- 0
+ }
x <- 1:4
if(x>5){x <- 0}
if(x>5){y <- 0}
gl(3,10)
?mapply
std(x)
sd(s)
traceback()
mean(s)
traceback
mean(s)
traceback()
?browse
?Browse
library(datasets)
data(iris)
?iris
class(iris)
?tapply
tapply(iris,iris$species)
iris$species
?iris
str(iris)
tapply(iris,iris$Species)
iris$Species
tapply(iris$Sepal.Length,iris$Species)
?tapply
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
?apply
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
?mapply
tapply(mtcars$hp, mtcars$cyl, mean)
z <- tapply(mtcars$hp, mtcars$cyl, mean)
z[3]-z[2]
tapply(iris$Sepal.Length,iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp,mtcar$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
209.21429-122.28571
z <- sapply(split(mtcars$hp,mtcars$cyl),mean)
z[3]-z[1]
set <- function(y) {
x <<- y
m <<- NULL
}
set
function() x
get <- function() x
get(5)
get()
x <- numeric()
get()
setmean <- function(mean) x <<- mean
setmean2 <- function(mean) x <- mean
setmean(5)
u <- setmean(5)
u
u <- setmean2(5)
u
?%<<-%
?%!%
%!%
?'!'
?'<<-'
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
makeVector(5)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(5)
u <- makeVector(5)
cachemean(u)
u <- makeVector(c(5,3,6))
cachemean(u)
setwd(R/Coursera/ProgrammingAssingment2)
setwd('R/Coursera/ProgrammingAssingment2')
getwd
getwd()
?setwd
setwd('R/Coursera/ProgrammingAssingment2')
setwd('R/Coursera/ProgrammingAssingment2')
setwd(R/Coursera/ProgrammingAssingment2)
setwd(/R/Coursera/ProgrammingAssingment2)
setwd("/R/Coursera/ProgrammingAssingment2")
setwd("/R/Coursera/ProgrammingAssignment2")
setwd("/R/Coursera/ProgrammingAssignment2")
setwd("/R/Coursera/ProgrammingAssignment2")
setwd("/R/Coursera/ProgrammingAssignment2/")
setwd("R/Coursera/ProgrammingAssignment2/")
getwd()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
u <- makevector(c(3,5,7))
u <- makeVector(c(3,5,7))
u
?return
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
u <- makeVector(c(3,5,7))
cachemean <- function(x, ...) {
+     m <- x$getmean()
+     if(!is.null(m)) {
+         message("getting cached data")
+         return(9)
+     }
+     data <- x$get()
+     m <- mean(data, ...)
+     x$setmean(m)
+     m
cachemean <- function(x, ...) {
+     m <- x$getmean()
+     if(!is.null(m)) {
+         message("getting cached data")
+         return(9)
+     }
+     data <- x$get()
+     m <- mean(data, ...)
+     x$setmean(m)
+     m
+ }
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(9)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(u)
cachemean(u)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list( set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <- c(8,9,10)
u<- makeVector(c(1,2,3))
class(u)
str(u)
cachemean(u)
y <- c(8,9,10)
cachemean(u)
makeVector()
u <- makeVector()
cachemean(u)
cachemean(u)
makeVector <- function(x = numeric()) {
m <- NULL
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list( get = get,
setmean = setmean,
getmean = getmean)
}
u<- makeVector(c(1,2,3))
cachemean(u)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
y <- c(8,9,10)
u <- makeVector(c(1,2))
cachemean(u)
cachemean(u)
cachemean(u)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
u <- makeVector(c(1,2),c(8,9))
u <- makeVector(c(1,2),y = c(8,9))
u <- makeVector(c(1,2),y <- c(8,9))
u <- makeVector(c(1,2))
cachemean(u,u$set(c(5,6)))
cachemean(u,y = u$set(c(5,6)))
cachemean(u,y = u$set(c(5,6)))
cachemean(u)
x <- matrix()
class(x)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vect <- makeVector(c(3,4,5))
vect
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(vect)
cachemean(vect)
cachemean(vect,y = vect$set(c(4,5,6)))
cachemean(vect)
cachemean(vect,y = vect$set(c(4,5,6)))
cachemean(vect,y <- vect$set(c(4,5,6)))
cachemean(vect,vect$set(c(4,5,6)))
u <- makeVector(c(1,2,3))
cachemean(u)
cachemean(u,<)
cachemean(u,y<-u$set(c(3,4,5)))
cachemean(u,y = u$set(c(3,4,5)))
y <- c(3,4,5)
y <- u$set(c(6,7,8))
y
cachemean(u)
y <- u$set(c(6,7,8))
cachemean(u)
y <- u$set(c(0,0,0))
cachemean(u)
cachemean(u,y <- u$set(c(1,2,3)))
cachemean(u,y = u$set(c(1,2,3)))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function(){x}
setinv <- function(inverse){inv <<- inverse}
getinv <- function(){inv}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
b <- makeCacheMatrix(matrix(1:9,3,3))
b
?solve
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x)
x$setinv(inv)
inv
}
ma <- makeCacheMatrix(matrix(c(1,2,3,4),2,2))
cacheSolve(ma)
m <- matrix(c(1,2,3,4),2,2)
m
class(m)
one <- class[1,1]
one <- m[1,1]
class(one)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x)
x$setinv(inv)
inv
}
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
getwd()
setwd('~/R/Coursera/ProgrammingAssignment2')
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
source('cachematrix.R')
ma <- makeCacheMatrix(matrix(c(1,2,3,4),2,2))
cacheSolve(ma)
matrix(c(1,2,3,4),2,2)
source('~/R/Coursera/ProgrammingAssignment2/cachematrix.R')
